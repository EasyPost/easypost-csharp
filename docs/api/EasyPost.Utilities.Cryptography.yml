### YamlMime:ManagedReference
items:
- uid: EasyPost.Utilities.Cryptography
  commentId: T:EasyPost.Utilities.Cryptography
  id: Cryptography
  parent: EasyPost.Utilities
  children:
  - EasyPost.Utilities.Cryptography.AsHexString(System.String,System.Text.Encoding)
  - EasyPost.Utilities.Cryptography.AsString(System.Byte[],System.Text.Encoding)
  - EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest(System.Byte[],System.String,System.Nullable{System.Text.NormalizationForm})
  - EasyPost.Utilities.Cryptography.SignaturesMatch(System.Byte[],System.Byte[])
  - EasyPost.Utilities.Cryptography.SignaturesMatch(System.String,System.String)
  langs:
  - csharp
  - vb
  name: Cryptography
  nameWithType: Cryptography
  fullName: EasyPost.Utilities.Cryptography
  type: Class
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Cryptography
    path: Utilities/Cryptography.cs
    startLine: 6
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  syntax:
    content: public static class Cryptography
    content.vb: Public Module Cryptography
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: EasyPost.Utilities.Cryptography.AsHexString(System.String,System.Text.Encoding)
  commentId: M:EasyPost.Utilities.Cryptography.AsHexString(System.String,System.Text.Encoding)
  id: AsHexString(System.String,System.Text.Encoding)
  isExtensionMethod: true
  parent: EasyPost.Utilities.Cryptography
  langs:
  - csharp
  - vb
  name: AsHexString(String, Encoding)
  nameWithType: Cryptography.AsHexString(String, Encoding)
  fullName: EasyPost.Utilities.Cryptography.AsHexString(System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: AsHexString
    path: Utilities/Cryptography.cs
    startLine: 16
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  summary: "\nConvert a string to a hex string using a specific encoding (defaults to UTF-8).\n"
  example: []
  syntax:
    content: public static string AsHexString(this string str, Encoding encoding = null)
    parameters:
    - id: str
      type: System.String
      description: String to convert to hex string.
    - id: encoding
      type: System.Text.Encoding
      description: 'Encoding to use. Default: UTF-8.'
    return:
      type: System.String
      description: Hex string.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsHexString(str As String, encoding As Encoding = Nothing) As String
  overload: EasyPost.Utilities.Cryptography.AsHexString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: EasyPost.Utilities.Cryptography.AsString(System.Byte[],System.Text.Encoding)
  commentId: M:EasyPost.Utilities.Cryptography.AsString(System.Byte[],System.Text.Encoding)
  id: AsString(System.Byte[],System.Text.Encoding)
  isExtensionMethod: true
  parent: EasyPost.Utilities.Cryptography
  langs:
  - csharp
  - vb
  name: AsString(Byte[], Encoding)
  nameWithType: Cryptography.AsString(Byte[], Encoding)
  fullName: EasyPost.Utilities.Cryptography.AsString(System.Byte[], System.Text.Encoding)
  type: Method
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: AsString
    path: Utilities/Cryptography.cs
    startLine: 29
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  summary: "\nConvert a byte array to a string using a specific encoding (defaults to UTF-8).\n"
  example: []
  syntax:
    content: public static string AsString(this byte[] bytes, Encoding encoding = null)
    parameters:
    - id: bytes
      type: System.Byte[]
      description: Byte array to convert to string.
    - id: encoding
      type: System.Text.Encoding
      description: 'Encoding to use. Default: UTF-8.'
    return:
      type: System.String
      description: String.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsString(bytes As Byte(), encoding As Encoding = Nothing) As String
  overload: EasyPost.Utilities.Cryptography.AsString*
  nameWithType.vb: Cryptography.AsString(Byte(), Encoding)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EasyPost.Utilities.Cryptography.AsString(System.Byte(), System.Text.Encoding)
  name.vb: AsString(Byte(), Encoding)
- uid: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest(System.Byte[],System.String,System.Nullable{System.Text.NormalizationForm})
  commentId: M:EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest(System.Byte[],System.String,System.Nullable{System.Text.NormalizationForm})
  id: CalculateHMACSHA256HexDigest(System.Byte[],System.String,System.Nullable{System.Text.NormalizationForm})
  isExtensionMethod: true
  parent: EasyPost.Utilities.Cryptography
  langs:
  - csharp
  - vb
  name: CalculateHMACSHA256HexDigest(Byte[], String, Nullable<NormalizationForm>)
  nameWithType: Cryptography.CalculateHMACSHA256HexDigest(Byte[], String, Nullable<NormalizationForm>)
  fullName: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest(System.Byte[], System.String, System.Nullable<System.Text.NormalizationForm>)
  type: Method
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: CalculateHMACSHA256HexDigest
    path: Utilities/Cryptography.cs
    startLine: 45
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  summary: "\nCalculate the HMAC-SHA256 hex digest of a byte array.\n"
  example: []
  syntax:
    content: public static string CalculateHMACSHA256HexDigest(this byte[] data, string secret, NormalizationForm? normalizationForm = null)
    parameters:
    - id: data
      type: System.Byte[]
      description: Data to calculate hex digest for.
    - id: secret
      type: System.String
      description: Key used to calculate data hex digest.
    - id: normalizationForm
      type: System.Nullable{System.Text.NormalizationForm}
      description: 'Normalization type to use when normalizing key. Default: No normalization.'
    return:
      type: System.String
      description: Hex digest of data.
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CalculateHMACSHA256HexDigest(data As Byte(), secret As String, normalizationForm As NormalizationForm? = Nothing) As String
  overload: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest*
  nameWithType.vb: Cryptography.CalculateHMACSHA256HexDigest(Byte(), String, Nullable(Of NormalizationForm))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest(System.Byte(), System.String, System.Nullable(Of System.Text.NormalizationForm))
  name.vb: CalculateHMACSHA256HexDigest(Byte(), String, Nullable(Of NormalizationForm))
- uid: EasyPost.Utilities.Cryptography.SignaturesMatch(System.Byte[],System.Byte[])
  commentId: M:EasyPost.Utilities.Cryptography.SignaturesMatch(System.Byte[],System.Byte[])
  id: SignaturesMatch(System.Byte[],System.Byte[])
  parent: EasyPost.Utilities.Cryptography
  langs:
  - csharp
  - vb
  name: SignaturesMatch(Byte[], Byte[])
  nameWithType: Cryptography.SignaturesMatch(Byte[], Byte[])
  fullName: EasyPost.Utilities.Cryptography.SignaturesMatch(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: SignaturesMatch
    path: Utilities/Cryptography.cs
    startLine: 66
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  summary: "\nCheck whether two signatures match. This is safe against timing attacks.\n"
  example: []
  syntax:
    content: public static bool SignaturesMatch(byte[] signature1, byte[] signature2)
    parameters:
    - id: signature1
      type: System.Byte[]
      description: First signature.
    - id: signature2
      type: System.Byte[]
      description: Second signature.
    return:
      type: System.Boolean
      description: Whether the two signatures match.
    content.vb: Public Shared Function SignaturesMatch(signature1 As Byte(), signature2 As Byte()) As Boolean
  overload: EasyPost.Utilities.Cryptography.SignaturesMatch*
  nameWithType.vb: Cryptography.SignaturesMatch(Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: EasyPost.Utilities.Cryptography.SignaturesMatch(System.Byte(), System.Byte())
  name.vb: SignaturesMatch(Byte(), Byte())
- uid: EasyPost.Utilities.Cryptography.SignaturesMatch(System.String,System.String)
  commentId: M:EasyPost.Utilities.Cryptography.SignaturesMatch(System.String,System.String)
  id: SignaturesMatch(System.String,System.String)
  parent: EasyPost.Utilities.Cryptography
  langs:
  - csharp
  - vb
  name: SignaturesMatch(String, String)
  nameWithType: Cryptography.SignaturesMatch(String, String)
  fullName: EasyPost.Utilities.Cryptography.SignaturesMatch(System.String, System.String)
  type: Method
  source:
    remote:
      path: EasyPost/Utilities/Cryptography.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: SignaturesMatch
    path: Utilities/Cryptography.cs
    startLine: 98
  assemblies:
  - EasyPost
  namespace: EasyPost.Utilities
  summary: "\nCheck whether two signatures match. This is safe against timing attacks.\n"
  example: []
  syntax:
    content: public static bool SignaturesMatch(string signature1, string signature2)
    parameters:
    - id: signature1
      type: System.String
      description: First signature.
    - id: signature2
      type: System.String
      description: Second signature.
    return:
      type: System.Boolean
      description: Whether the two signatures match.
    content.vb: Public Shared Function SignaturesMatch(signature1 As String, signature2 As String) As Boolean
  overload: EasyPost.Utilities.Cryptography.SignaturesMatch*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: EasyPost.Utilities
  commentId: N:EasyPost.Utilities
  name: EasyPost.Utilities
  nameWithType: EasyPost.Utilities
  fullName: EasyPost.Utilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasyPost.Utilities.Cryptography.AsHexString*
  commentId: Overload:EasyPost.Utilities.Cryptography.AsHexString
  name: AsHexString
  nameWithType: Cryptography.AsHexString
  fullName: EasyPost.Utilities.Cryptography.AsHexString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: true
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: EasyPost.Utilities.Cryptography.AsString*
  commentId: Overload:EasyPost.Utilities.Cryptography.AsString
  name: AsString
  nameWithType: Cryptography.AsString
  fullName: EasyPost.Utilities.Cryptography.AsString
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest*
  commentId: Overload:EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest
  name: CalculateHMACSHA256HexDigest
  nameWithType: Cryptography.CalculateHMACSHA256HexDigest
  fullName: EasyPost.Utilities.Cryptography.CalculateHMACSHA256HexDigest
- uid: System.Nullable{System.Text.NormalizationForm}
  commentId: T:System.Nullable{System.Text.NormalizationForm}
  parent: System
  definition: System.Nullable`1
  name: Nullable<NormalizationForm>
  nameWithType: Nullable<NormalizationForm>
  fullName: System.Nullable<System.Text.NormalizationForm>
  nameWithType.vb: Nullable(Of NormalizationForm)
  fullName.vb: System.Nullable(Of System.Text.NormalizationForm)
  name.vb: Nullable(Of NormalizationForm)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    nameWithType: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Text.NormalizationForm
    name: NormalizationForm
    nameWithType: NormalizationForm
    fullName: System.Text.NormalizationForm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: EasyPost.Utilities.Cryptography.SignaturesMatch*
  commentId: Overload:EasyPost.Utilities.Cryptography.SignaturesMatch
  name: SignaturesMatch
  nameWithType: Cryptography.SignaturesMatch
  fullName: EasyPost.Utilities.Cryptography.SignaturesMatch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
