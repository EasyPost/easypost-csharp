### YamlMime:ManagedReference
items:
- uid: EasyPost._base.WithClient
  commentId: T:EasyPost._base.WithClient
  id: WithClient
  parent: EasyPost._base
  children:
  - EasyPost._base.WithClient.Create``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.CreateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.DeleteNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.List``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.Request(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.Request``1(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.Update``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  - EasyPost._base.WithClient.UpdateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  langs:
  - csharp
  - vb
  name: WithClient
  nameWithType: WithClient
  fullName: EasyPost._base.WithClient
  type: Class
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: WithClient
    path: _base/WithClient.cs
    startLine: 10
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: public abstract class WithClient
    content.vb: Public MustInherit Class WithClient
  inheritance:
  - System.Object
  derivedClasses:
  - EasyPost._base.EasyPostObject
  - EasyPost._base.EasyPostService
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: EasyPost._base.WithClient.Create``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Create``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: Create``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Create<T>(String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.Create<T>(String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.Create<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Create
    path: _base/WithClient.cs
    startLine: 15
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: >-
      protected async Task<T> Create<T>(string url, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: rootElement
      type: System.String
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Protected Function Create(Of T As Class)(url As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.Create*
  nameWithType.vb: WithClient.Create(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Create(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: Create(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.CreateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.CreateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  id: CreateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: CreateNoResponse(String, Dictionary<String, Object>, ApiVersion)
  nameWithType: WithClient.CreateNoResponse(String, Dictionary<String, Object>, ApiVersion)
  fullName: EasyPost._base.WithClient.CreateNoResponse(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: CreateNoResponse
    path: _base/WithClient.cs
    startLine: 20
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: protected async Task CreateNoResponse(string url, Dictionary<string, object> parameters = null, ApiVersion overrideApiVersion = null)
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function CreateNoResponse(url As String, parameters As Dictionary(Of String, Object) = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task
  overload: EasyPost._base.WithClient.CreateNoResponse*
  nameWithType.vb: WithClient.CreateNoResponse(String, Dictionary(Of String, Object), ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.CreateNoResponse(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), EasyPost._base.ApiVersion)
  name.vb: CreateNoResponse(String, Dictionary(Of String, Object), ApiVersion)
- uid: EasyPost._base.WithClient.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: Delete``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Delete<T>(String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.Delete<T>(String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.Delete<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Delete
    path: _base/WithClient.cs
    startLine: 23
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: >-
      protected async Task<T> Delete<T>(string url, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: rootElement
      type: System.String
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Protected Function Delete(Of T As Class)(url As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.Delete*
  nameWithType.vb: WithClient.Delete(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Delete(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: Delete(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.DeleteNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.DeleteNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  id: DeleteNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: DeleteNoResponse(String, Dictionary<String, Object>, ApiVersion)
  nameWithType: WithClient.DeleteNoResponse(String, Dictionary<String, Object>, ApiVersion)
  fullName: EasyPost._base.WithClient.DeleteNoResponse(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: DeleteNoResponse
    path: _base/WithClient.cs
    startLine: 28
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: protected async Task DeleteNoResponse(string url, Dictionary<string, object> parameters = null, ApiVersion overrideApiVersion = null)
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function DeleteNoResponse(url As String, parameters As Dictionary(Of String, Object) = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task
  overload: EasyPost._base.WithClient.DeleteNoResponse*
  nameWithType.vb: WithClient.DeleteNoResponse(String, Dictionary(Of String, Object), ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.DeleteNoResponse(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), EasyPost._base.ApiVersion)
  name.vb: DeleteNoResponse(String, Dictionary(Of String, Object), ApiVersion)
- uid: EasyPost._base.WithClient.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: Get``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Get<T>(String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.Get<T>(String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.Get<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Get
    path: _base/WithClient.cs
    startLine: 31
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: >-
      protected async Task<T> Get<T>(string url, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: rootElement
      type: System.String
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Protected Function Get(Of T As Class)(url As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.Get*
  nameWithType.vb: WithClient.Get(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Get(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: Get(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.List``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.List``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: List``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: List<T>(String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.List<T>(String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.List<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: List
    path: _base/WithClient.cs
    startLine: 36
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: >-
      protected async Task<T> List<T>(string url, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: rootElement
      type: System.String
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Protected Function List(Of T As Class)(url As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.List*
  nameWithType.vb: WithClient.List(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.List(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: List(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.Request``1(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Request``1(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: Request``1(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Request<T>(Method, String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.Request<T>(Method, String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.Request<T>(RestSharp.Method, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Request
    path: _base/WithClient.cs
    startLine: 51
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  summary: "\nMake an HTTP request to the EasyPost API and deserialize the response JSON into an object.\n"
  example: []
  syntax:
    content: >-
      protected async Task<T> Request<T>(Method method, string endpoint, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: method
      type: RestSharp.Method
      description: HTTP method.
    - id: endpoint
      type: System.String
      description: EasyPost API endpoint (no base url or API version).
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Optional parameters to include in the request.
    - id: rootElement
      type: System.String
      description: Key to narrow to when deserializing the resultant JSON into an object.
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
      description: Override API version hit for HTTP request. Defaults to general availability.
    typeParameters:
    - id: T
      description: Type of object to return from request.
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: A T-type object.
    content.vb: Protected Function Request(Of T As Class)(method As Method, endpoint As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.Request*
  nameWithType.vb: WithClient.Request(Of T)(Method, String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Request(Of T)(RestSharp.Method, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: Request(Of T)(Method, String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.Request(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Request(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  id: Request(RestSharp.Method,System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Request(Method, String, Dictionary<String, Object>, ApiVersion)
  nameWithType: WithClient.Request(Method, String, Dictionary<String, Object>, ApiVersion)
  fullName: EasyPost._base.WithClient.Request(RestSharp.Method, System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Request
    path: _base/WithClient.cs
    startLine: 64
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  summary: "\nMake an HTTP request to the EasyPost API.\n"
  example: []
  syntax:
    content: protected async Task Request(Method method, string url, Dictionary<string, object> parameters = null, ApiVersion overrideApiVersion = null)
    parameters:
    - id: method
      type: RestSharp.Method
      description: HTTP method.
    - id: url
      type: System.String
      description: EasyPost API endpoint (no base url or API version).
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
      description: Optional parameters to include in the request.
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
      description: Override API version hit for HTTP request. Defaults to general availability.
    return:
      type: System.Threading.Tasks.Task
      description: None.
    content.vb: Protected Function Request(method As Method, url As String, parameters As Dictionary(Of String, Object) = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task
  overload: EasyPost._base.WithClient.Request*
  nameWithType.vb: WithClient.Request(Method, String, Dictionary(Of String, Object), ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Request(RestSharp.Method, System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), EasyPost._base.ApiVersion)
  name.vb: Request(Method, String, Dictionary(Of String, Object), ApiVersion)
- uid: EasyPost._base.WithClient.Update``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.Update``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  id: Update``1(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.String,EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: Update<T>(String, Dictionary<String, Object>, String, ApiVersion)
  nameWithType: WithClient.Update<T>(String, Dictionary<String, Object>, String, ApiVersion)
  fullName: EasyPost._base.WithClient.Update<T>(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, System.String, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: Update
    path: _base/WithClient.cs
    startLine: 66
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: >-
      protected async Task<T> Update<T>(string url, Dictionary<string, object> parameters = null, string rootElement = null, ApiVersion overrideApiVersion = null)

          where T : class
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: rootElement
      type: System.String
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    typeParameters:
    - id: T
    return:
      type: System.Threading.Tasks.Task{{T}}
    content.vb: Protected Function Update(Of T As Class)(url As String, parameters As Dictionary(Of String, Object) = Nothing, rootElement As String = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task(Of T)
  overload: EasyPost._base.WithClient.Update*
  nameWithType.vb: WithClient.Update(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.Update(Of T)(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), System.String, EasyPost._base.ApiVersion)
  name.vb: Update(Of T)(String, Dictionary(Of String, Object), String, ApiVersion)
- uid: EasyPost._base.WithClient.UpdateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  commentId: M:EasyPost._base.WithClient.UpdateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  id: UpdateNoResponse(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},EasyPost._base.ApiVersion)
  parent: EasyPost._base.WithClient
  langs:
  - csharp
  - vb
  name: UpdateNoResponse(String, Dictionary<String, Object>, ApiVersion)
  nameWithType: WithClient.UpdateNoResponse(String, Dictionary<String, Object>, ApiVersion)
  fullName: EasyPost._base.WithClient.UpdateNoResponse(System.String, System.Collections.Generic.Dictionary<System.String, System.Object>, EasyPost._base.ApiVersion)
  type: Method
  source:
    remote:
      path: EasyPost/_base/WithClient.cs
      branch: docs
      repo: git@github.com:EasyPost/easypost-csharp.git
    id: UpdateNoResponse
    path: _base/WithClient.cs
    startLine: 71
  assemblies:
  - EasyPost
  namespace: EasyPost._base
  syntax:
    content: protected async Task UpdateNoResponse(string url, Dictionary<string, object> parameters = null, ApiVersion overrideApiVersion = null)
    parameters:
    - id: url
      type: System.String
    - id: parameters
      type: System.Collections.Generic.Dictionary{System.String,System.Object}
    - id: overrideApiVersion
      type: EasyPost._base.ApiVersion
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Function UpdateNoResponse(url As String, parameters As Dictionary(Of String, Object) = Nothing, overrideApiVersion As ApiVersion = Nothing) As Task
  overload: EasyPost._base.WithClient.UpdateNoResponse*
  nameWithType.vb: WithClient.UpdateNoResponse(String, Dictionary(Of String, Object), ApiVersion)
  modifiers.csharp:
  - protected
  - async
  modifiers.vb:
  - Protected
  fullName.vb: EasyPost._base.WithClient.UpdateNoResponse(System.String, System.Collections.Generic.Dictionary(Of System.String, System.Object), EasyPost._base.ApiVersion)
  name.vb: UpdateNoResponse(String, Dictionary(Of String, Object), ApiVersion)
references:
- uid: EasyPost._base
  commentId: N:EasyPost._base
  name: EasyPost._base
  nameWithType: EasyPost._base
  fullName: EasyPost._base
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: EasyPost._base.WithClient.Create*
  commentId: Overload:EasyPost._base.WithClient.Create
  name: Create
  nameWithType: WithClient.Create
  fullName: EasyPost._base.WithClient.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.Dictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, Object>
  nameWithType: Dictionary<String, Object>
  fullName: System.Collections.Generic.Dictionary<System.String, System.Object>
  nameWithType.vb: Dictionary(Of String, Object)
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.Object)
  name.vb: Dictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: EasyPost._base.ApiVersion
  commentId: T:EasyPost._base.ApiVersion
  parent: EasyPost._base
  name: ApiVersion
  nameWithType: ApiVersion
  fullName: EasyPost._base.ApiVersion
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullName.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: EasyPost._base.WithClient.CreateNoResponse*
  commentId: Overload:EasyPost._base.WithClient.CreateNoResponse
  name: CreateNoResponse
  nameWithType: WithClient.CreateNoResponse
  fullName: EasyPost._base.WithClient.CreateNoResponse
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: EasyPost._base.WithClient.Delete*
  commentId: Overload:EasyPost._base.WithClient.Delete
  name: Delete
  nameWithType: WithClient.Delete
  fullName: EasyPost._base.WithClient.Delete
- uid: EasyPost._base.WithClient.DeleteNoResponse*
  commentId: Overload:EasyPost._base.WithClient.DeleteNoResponse
  name: DeleteNoResponse
  nameWithType: WithClient.DeleteNoResponse
  fullName: EasyPost._base.WithClient.DeleteNoResponse
- uid: EasyPost._base.WithClient.Get*
  commentId: Overload:EasyPost._base.WithClient.Get
  name: Get
  nameWithType: WithClient.Get
  fullName: EasyPost._base.WithClient.Get
- uid: EasyPost._base.WithClient.List*
  commentId: Overload:EasyPost._base.WithClient.List
  name: List
  nameWithType: WithClient.List
  fullName: EasyPost._base.WithClient.List
- uid: EasyPost._base.WithClient.Request*
  commentId: Overload:EasyPost._base.WithClient.Request
  name: Request
  nameWithType: WithClient.Request
  fullName: EasyPost._base.WithClient.Request
- uid: RestSharp.Method
  commentId: T:RestSharp.Method
  parent: RestSharp
  isExternal: true
  name: Method
  nameWithType: Method
  fullName: RestSharp.Method
- uid: RestSharp
  commentId: N:RestSharp
  isExternal: true
  name: RestSharp
  nameWithType: RestSharp
  fullName: RestSharp
- uid: EasyPost._base.WithClient.Update*
  commentId: Overload:EasyPost._base.WithClient.Update
  name: Update
  nameWithType: WithClient.Update
  fullName: EasyPost._base.WithClient.Update
- uid: EasyPost._base.WithClient.UpdateNoResponse*
  commentId: Overload:EasyPost._base.WithClient.UpdateNoResponse
  name: UpdateNoResponse
  nameWithType: WithClient.UpdateNoResponse
  fullName: EasyPost._base.WithClient.UpdateNoResponse
